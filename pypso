#!/usr/bin/python
# -*- coding: utf-8 -*-
##
# @file
# @brief GUI for running Particle Swarm Optimization over Yagi antenna design
# @author Janne Toivola, OH2GXN, 2016


# nuts and bolts
import os
import sys
import argparse
import numpy

# GUI and plots
import Tkinter
import tkFileDialog
import tkSimpleDialog
import tkMessageBox
import pylab
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.backends.backend_tkagg import NavigationToolbar2TkAgg

# Yagi-specific stuff
from yagi import *

progname = 'PyPSO'
version  = '0.1'

# NOTE: class, named tuple, or dictionary?
class PSOsettings:
    """Parameters related to running Particle Swarm Optimization."""

    def __init__(self, particles=10, width=0.5, inertia=0.5, confidence=0.5):
        
        self.N = particles        
        self.W = width
        self.I = inertia
        self.C = confidence # update factor between personal and global best
        # NOTE: validating the criterion depends on the context
        self.criterion = '1.0' # Python expression evaluated by the particles
        #self.criterion = 'weight' # a less trivial example

    def valid(self):
        if (self.N < 2):
            #raise ValueError("At least 2 particles are required.")
            return False
        if (self.W <= 0.0 or 1.0 < self.W):
            #raise ValueError("Width of the initial swarm has to be in [0,1].")
            return False
        if (self.I < 0.0 or 1.0 < self.I):
            #raise ValueError("Inertial factor has to be in [0,1].")
            return False
        if (self.C < 0.0 or 1.0 < self.C):
            #raise ValueError("Personal vs. Global weight has to be in [0,1].")
            return False
        return True

            
class PSOdialog(tkSimpleDialog.Dialog):
    """Simple dialog window for editing PSO parameter values"""

    def __init__(self, parent, settings, title=None):
        self.values = settings
        tkSimpleDialog.Dialog.__init__(self, parent, title)
        
    def body(self, master):
        Tkinter.Label(master, text="Number of particles:").grid(row=0)
        Tkinter.Label(master, text="Initial swarm width:").grid(row=1)
        Tkinter.Label(master, text="Particle inertia:").grid(row=2)
        Tkinter.Label(master, text="Personal vs. Global best:").grid(row=3)
        Tkinter.Label(master, text="Optimization criterion:").grid(row=4)

        self.e1 = e = Tkinter.Entry(master)
        e.delete(0, Tkinter.END)
        e.insert(0, "%d" % self.values.N)
        self.e2 = e = Tkinter.Entry(master)
        e.delete(0, Tkinter.END)
        e.insert(0, "%g" % self.values.W)
        self.e3 = e = Tkinter.Entry(master)
        e.delete(0, Tkinter.END)
        e.insert(0, "%g" % self.values.I)
        self.e4 = e = Tkinter.Entry(master)
        e.delete(0, Tkinter.END)
        e.insert(0, "%g" % self.values.C)
        self.e5 = e = Tkinter.Entry(master)
        e.delete(0, Tkinter.END)
        e.insert(0, self.values.criterion)
        # TODO: initial content of text fields from self.values?

        self.e1.grid(row=0, column=1)
        self.e2.grid(row=1, column=1)
        self.e3.grid(row=2, column=1)
        self.e4.grid(row=3, column=1)
        self.e5.grid(row=4, column=1)
        return self.e1 # initial focus

    def buttonbox(self):
        """Add standard button box, with sane order of Cancel & OK buttons."""
        box = Tkinter.Frame(self)
        w = Tkinter.Button(box, text="Cancel", width=10, command=self.cancel)
        w.pack(side=Tkinter.LEFT, padx=5, pady=5)
        w = Tkinter.Button(box, text="OK", width=10, command=self.ok,
                           default=Tkinter.ACTIVE)
        w.pack(side=Tkinter.LEFT, padx=5, pady=5)
        self.bind("<Return>", self.ok)
        self.bind("<Escape>", self.cancel)
        box.pack()
        
    def apply(self):
        self.values.N = int(self.e1.get())
        self.values.W = float(self.e2.get())
        self.values.I = float(self.e3.get())
        self.values.C = float(self.e4.get())
        self.values.criterion = self.e5.get()

    def validate(self):
        if self.values.valid():
            return 1
        return 0
                

class MainWindow:
    """The main window."""

    def __init__(self, master):
        # current state
        self.pso = PSOsettings() # starts with some constant default values
        self.__reset()

        # GUI stuff
        self.root = master
        self.__setMenus(master)
        self.__setWindow(master)

        
    def __reset(self):
        """Initialization of PSO state."""
        self.currentBest = 0 # index of the particle with global best
        self.swarm  = None   # list of all particles, or None
        self.swarmX = None   # current state of each particle
        self.swarmP = None   # personal best state of each particle
        self.swarmV = None   # current velocity of each particle
        self.data   = None   # evaluations of the particles for each iteration
        #self.pso settings stay the same

    def __clear(self):
        """Init and clean-up for the plot."""
        if self.ax is None:
            return
        ax = self.ax
        ax.cla()
        ax.grid(True)
        ax.set_title("Progress of the optimization")
        ax.set_xlabel("Iteration")
        ax.set_ylabel("Evaluation")
        ax.axis([-1.0,1.0, 0,10]) # TODO: better ideas?
        self.lines = None # ax.plot(self.data, '-')
        
    def __setMenus(self, master):
        """Creates the toolbar at init."""
        # menu bar
        self.menu = Tkinter.Menu(master)
        master.config(menu=self.menu)

        # File submenu
        self.loadOptions = opts = {}
        opts['defaultextension'] = '.csv' # or .nec ?
        opts['filetypes'] = [('all files', '.*'),('dimension tables', '.csv')]
        opts['parent'] = master
        opts['title'] = 'Load initial guess'

        self.saveOptions = opts = {}
        opts['defaultextension'] = '.csv' # or .nec ?
        opts['filetypes'] = [('all files', '.*'),('dimension tables', '.csv')]
        opts['parent'] = master
        opts['title'] = 'Save current best'

        self.exportOptions = opts = {}
        opts['defaultextension'] = '.nec'
        opts['filetypes'] = [('all files', '.*'),('NEC files', '.nec')]
        opts['parent'] = master
        opts['title'] = 'Export current best'

        self.fileMenu = Tkinter.Menu(self.menu)
        self.menu.add_cascade(label="File", menu=self.fileMenu)
        self.fileMenu.add_command(label="New...", 
                                  command=self.new)
        self.fileMenu.add_command(label="Load initial...", 
                                  command=self.load)
        self.fileMenu.add_command(label="Save...",
                                  command=self.save)
        self.fileMenu.add_command(label="Export NEC...",
                                  command=self.export)
        self.fileMenu.add_command(label="Quit", 
                                  command=self.quit)

        # Settings submenu
        self.setMenu = Tkinter.Menu(self.menu)
        self.menu.add_cascade(label="Settings", menu=self.setMenu)
        self.setMenu.add_command(label="PSO parameters...", 
                                 command=self.updateSettings)
        self.setMenu.add_command(label="About", 
                                 command=self.about)


    def __setWindow(self, master):
        """Creates the main GUI window at init."""
        # a frame for all the stuff
        self.frame = frame = Tkinter.Frame(master)
        frame.bind("<Return>", self.next) # Press enter to progress

        # a canvas for plotting evaluation history
        self.figure = fig = pylab.figure(1)
        self.ax = ax = fig.add_subplot(111)
        self.__clear()
        
        self.canvas = canvas = FigureCanvasTkAgg(fig, frame)
        canvas.show()
        canvas.get_tk_widget().pack(side=Tkinter.TOP,
                                    fill=Tkinter.BOTH, 
                                    expand=1)
        #canvas.get_tk_widget().grid(row=1, column=0)
        
        self.toolbar = NavigationToolbar2TkAgg(canvas, frame)
        self.toolbar.update()
        canvas._tkcanvas.pack(side=Tkinter.TOP, fill=Tkinter.BOTH, expand=1)
        #canvas._tkcanvas.grid(row=0, column=0)

        frame.pack()
        
        # a button for randomizing the current guess
        self.rButton = Tkinter.Button(self.frame,\
                                      name='rbutton',\
                                      text='Randomize',\
                                      command=self.randomize,
                                      state=Tkinter.DISABLED)
        self.rButton.pack(side=Tkinter.LEFT)
        #self.rButton.grid(row=2, column=0)

        # a button for advancing the optimization for one interation
        self.nButton = Tkinter.Button(self.frame,\
                                      name='nbutton',\
                                      text='Next step',\
                                      command=self.next,
                                      state=Tkinter.DISABLED)
        self.nButton.pack(side=Tkinter.RIGHT)
        #self.nButton.grid(row=2, column=1)

        # status bar
        self.statusBar = Tkinter.Label(master, text="", bd=1, 
                                       relief=Tkinter.SUNKEN, 
                                       anchor=Tkinter.W)
        self.statusBar.pack(side=Tkinter.BOTTOM, fill=Tkinter.X)
        #self.statusBar.grid(row=3, column=0)

        frame.pack()



    def new(self):
        """TODO: a dialog for a starting with a new guess..?"""
        self.rButton.config(state=Tkinter.DISABLED)
        self.nButton.config(state=Tkinter.DISABLED)
        self.__reset()
        self.__clear()
        self.canvas.draw()
        
        sys.stderr.write("Error: fancy GUI not implemented yet. Use load.\n")
        # TODO: ask for number of elements and frequency band?


    def load(self, filename=None):
        """Dialog for loading the initial guess from a file."""
        if filename is None:
            filename = tkFileDialog.askopenfilename(**self.loadOptions)
        if not filename:
            return # user clicked Cancel
        guess = Yagi.loadCSV( filename )
        self.firstplot(guess)
        self.report("Initial guess loaded from %s." % filename)
        self.rButton.config(state=Tkinter.NORMAL)
        

    def save(self):
        """Dialog for saving the current best design to a CSV file."""
        filename = tkFileDialog.asksaveasfilename(**self.saveOptions)
        if not filename:
            return # user clicked Cancel
        self.swarm[self.currentBest].saveCSV( filename )
        self.report("Current best saved to %s." % filename)


    def export(self):
        """Dialog for saving the current best design to a NEC file."""
        filename = tkFileDialog.asksaveasfilename(**self.exportOptions)
        fid = open(filename, 'w')
        self.swarm[self.currentBest].fprintNEC(fid)
        fid.close()
        self.report("Current best saved to %s." % filename)


    def about(self):
        """Shows some basic info."""
        tkMessageBox.showinfo("About", "%s version %s\n" % 
                              (progname, version)) # TODO: more...


    def updateSettings(self):
        dialog = PSOdialog(self.root, self.pso, "PSO parameters")
        

    def quit(self):
        """Does some clean-up and quits the program."""
        if tkMessageBox.askokcancel("Quit", "Remembered to save the result?"):
            sys.stderr.write('CU agn, 73 de OH2GXN.\n')
            self.root.quit()
            self.root.destroy()
            #exit() only for the main thread in a script


    def report(self, message):
        """Sets the status bar."""
        self.statusBar.configure(text=message)
        self.statusBar.update_idletasks()

        
    def firstplot(self, guess):
        """Things to do when starting a new plot from the given design."""
        self.__reset()
        self.__clear()
        self.swarm = [guess]
        self.currentBest = 0
        self.report("Evaluating initial guess...")
        self.data = data = numpy.zeros((1,1))
        data[0,0] = guess.evaluate(self.pso.criterion)
        self.lines = self.ax.plot(numpy.zeros((1,1)), self.data[0,0], 
                                  color='red', linestyle='solid', marker='o')
        self.ax.autoscale(enable=True, axis='both', tight=True)
        self.canvas.draw()


    def randomize(self):
        """Takes the best design and produces a swarm of N
        perturbed versions of it."""

        # Make sure we have one candidate
        if self.swarm is None:
            self.load()
        if len(self.swarm) > 1:
            # restart from the best of an existing swarm
            self.firstplot(self.swarm[self.currentBest])

        # Make it the first particle of N
        N = self.pso.N
        bestValue = self.data[0,0] # NOTE: computed during firstplot()
        self.data = data = numpy.zeros((N, 1), numpy.float)
        data[0,0] = bestValue # avoids re-evaluating the initial guess
        
        # Init PSO, the first one starts with zero velocity
        vector = self.swarm[self.currentBest].toVector()
        M = vector.shape[0]
        W = self.pso.W
        self.swarmX = X  = numpy.zeros((N, M), numpy.float)
        self.swarmP = P  = numpy.zeros((N, M), numpy.float)
        self.swarmV = V  = numpy.zeros((N, M), numpy.float)
        X[0,:] = vector
        P[0,:] = vector
        V[0,:] = numpy.zeros_like(vector)
        for n in range(1,N):
            anotherX = numpy.ones_like(vector)
            anotherV = numpy.ones_like(vector)
            for m in range (0,M):
                anotherX[m] = (1.0 + W * (numpy.random.rand()-0.5)) * vector[m]
                anotherV[m] = 0.1 * (W * (numpy.random.rand()-0.5)) * vector[m]
            another = self.swarm[self.currentBest].fromVector(anotherX)
            self.swarm.append(another)
            X[n,:] = anotherX
            P[n,:] = anotherX
            V[n,:] = anotherV
            self.report("Evaluating particle %d / %d..." % (n+1,N))
            data[n,0] = personalBest = another.evaluate(self.pso.criterion)
            self.lines.extend(self.ax.plot(numpy.zeros((1,1)), 
                                           self.data[n,0], 
                                           color='blue', 
                                           linestyle='solid', 
                                           marker='o'))
            if personalBest < bestValue:
                bestValue = personalBest
                self.currentBest = n
        #self.report("Particle %d seems best so far: %g" % 
        #            (self.currentBest, bestValue))
        self.lines.extend(self.ax.plot(0, 
                                       self.data[self.currentBest,0], 
                                       color='green', 
                                       linestyle='dashed', 
                                       marker='v'))
        self.report("Random swarm of particles ready.")
        self.nButton.config(state=Tkinter.NORMAL)
        self.ax.autoscale(enable=True, axis='both', tight=True)
        self.canvas.draw()


    def next(self):
        """Evaluates the current swarm of designs and performs one step of
        Particle Swarm Optimization."""
        # TODO: parallel execution?
        if self.swarmX is None:
            sys.stderr.write("You must load and randomize first.\n")
            return
        N = self.swarmX.shape[0]
        D = self.swarmX.shape[1]
        T = self.data.shape[1]
        C = self.pso.C
        I = self.pso.I
        
        newdata = numpy.zeros((N,1))
        for n in range(0,N):
            # accelerate velocity towards personal & global optima
            rp =        C  * numpy.random.rand(D)
            rg = (1.0 - C) * numpy.random.rand(D)
            self.swarmV[n,:] = (I * self.swarmV[n,:] + (1.0 - I) *
                                (rp * (self.swarmP[n,:] - self.swarmX[n,:]) +
                                 rg * (self.swarmX[self.currentBest,:] - 
                                       self.swarmX[n,:])))
            # update position by velocity
            self.swarmX[n,:] = self.swarmX[n,:] + self.swarmV[n,:]
            # update swarm object from the updated position vector
            self.swarm[n].updateFromVector(self.swarmX[n,:])
            # evaluate the new particle and append to self.data
            self.report("Evaluating particle %d / %d..." % (n+1,N))
            newdata[n,0] = self.swarm[n].evaluate(self.pso.criterion)
            if (newdata[n,0] < numpy.min(self.data[n,:])):
                self.swarmP[n,:] = self.swarmX[n,:] # personal best

        for n in range(0,N):
            if (newdata[n,0] < numpy.min(self.data[self.currentBest,:])):
                self.currentBest = n # new globally & historically best

        # update the plot
        self.data = numpy.concatenate((self.data, newdata), axis=1)
        for n in range(0,N):
            self.lines[n].set_data(numpy.arange(T+1), self.data[n,:])
        self.lines[N].set_data(numpy.arange(T+1), 
                               numpy.amin(self.data, axis=0))
        self.ax.axis([0, T, numpy.min(self.data), numpy.max(self.data)])
        #self.ax.autoscale(enable=True, axis='both', tight=True)
        self.canvas.draw()
        self.report("Iteration %d ready." % T)
        

if __name__ == '__main__':
    # Command line arguments
    note = 'A program for running Particle Swarm Optimization for yagis'
    parser = argparse.ArgumentParser(description=note)
    parser.add_argument('file', nargs='?', metavar='elements.csv',
        help='file with element positions and dimensions')
    args = parser.parse_args()
    
    # the root widget
    root = Tkinter.Tk()
    root.title("%s" % (progname)) # progname - empty?
    try:
        # TODO: switch the default icon?
        #root.iconbitmap(default='line-chart.xbm')
        directory = sys.path[0]
        iconfile = os.path.join(directory, "line-chart.gif")
        icon = Tkinter.PhotoImage(file=iconfile)
        root.iconbitmap(icon)
        # Icon from http://www.flaticon.com/authors/situ-herrera  CC 3.0 BY
    except Tkinter.TclError:
        sys.stderr.write("Error: switching the icon failed.\n")
    
    # instance of our application
    win = MainWindow(root)
    if args.file is not None:
        win.load(filename=args.file)
    # FIXME: so how to set boom & pole etc.?
    root.protocol("WM_DELETE_WINDOW", win.quit) # quit when window closed
    
    # start the Tkinter event loop
    root.mainloop()

else:
    sys.stderr.write('NOTE: %s was not meant to be imported.\n' % __name__)
