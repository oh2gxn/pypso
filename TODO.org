* Introduction to PyPSO
The name refers to:
- Python, the programming language
- Particle Swarm Optimization (PSO), a search heuristic

The two above are combined with NEC2, antenna modelling software, to perform
semi-automatic antenna design. The idea is following:
- 1 ::take an initial guess for a yagi antenna, which has 
  - a given number of elements, approximately good lengths and positions
  - long enough boom
- 2 :: define which parameters to optimize (elem. lengths and positions)
- 3 :: define a univariate evaluation criterion (say, an equation based on
       SWR & F/B ratio at given frequency band)
- 4 :: generate a "cloud" of proposed antenna designs by randomly varying the
       free parameters (2)
- 5 :: evaluate each of the proposed antennas
  - run NEC2
  - calculate the evaluation function (3)
- 6 :: modify each of the designs in terms of PSO
  - the parameter vector is a point in N-dimensional space
  - each antenna design (particle) has inertia,
  - but also attracted towards the best design
- 7 :: if all the variants seem converged to a single design, quit
  - else, move to (5) for next iteration
- 8 :: if the end result looks shit, jump to (1)

Author: Janne Toivola, OH2GXN

* Progress
** TODO NEC file generator
- learn how to write a yagi description, given element dimensions
** TODO NEC result parser
- see what the output looks like
** TODO Evaluation function editor
- text box -> sanitized string
- Python can "eval(string)"
** TODO Evaluation result visualization
- plot goodness vs. iteration curves for each particle, live update
- separate plots for individual terms (like F/B ratio)
** TODO PSO update rule
- inertia vs. attraction towards winner
- initial position and also initial momentum?
